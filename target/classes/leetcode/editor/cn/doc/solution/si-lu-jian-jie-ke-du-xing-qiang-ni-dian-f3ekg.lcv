> Problem: [904. 水果成篮](https://leetcode.cn/problems/fruit-into-baskets/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java

class Solution {
    public int totalFruit(int[] fruits) {
        int len = fruits.length;
        int left = 0;
        int max_sum  = 0;
        int type1 = -1;
        int type2 = -1;
        int sum1= 0, sum2 = 0;
        for(int right = 0; right<len; ++right){
            if(type1==-1 && type2==-1){
                sum1++;
                type1 = fruits[right];
            }
            else if(type1!=-1 && type2 == -1){
                if(fruits[right]==type1){
                    sum1++;
                }else{
                    type2 = fruits[right];
                    sum2++;
                }
            }
            else if(type1!= -1 && type2 == -1){
                if(fruits[right]==type2){
                    sum2++;
                }else{
                    type1 = fruits[right];
                    sum1++;
                }
            }else if(type1!=-1 && type2!=-1){
                if(fruits[right]!=type1 && fruits[right]!=type2){
                    while(true){
                        if(fruits[left]==type1){
                            sum1--;
                        }else if(fruits[left]==type2){
                            sum2--;
                        }
                        left++;
                        if(sum1==0 || sum2==0) break;
                    }
                    if(sum1==0){
                        type1 = fruits[right];
                        sum1++;
                    } 
                    else if(sum2==0){
                        type2 = fruits[right];
                        sum2++;
                    }
                }else if(fruits[right]==type1){
                    sum1++;
                }else if(fruits[right]==type2){
                    sum2++;
                }
            }
            max_sum = Math.max(max_sum, sum1+sum2);
        }
        return max_sum;
    }
}
```

